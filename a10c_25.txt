==== 25주차(2013.10.12) ====
<box center round blue 95% | <typo fs:18px;> ** 1.  setup_arch()→setup_machine_fdt()  ** </typo>>
\\
{{ :스터디:setup_machine_fdt_final.jpg?direct |}}
\\
<WRAP center round box 95%>
<typo fs:16px;>
** 1) device tree의 경우 chosen부터 시작하는 것인가요? node와 property가 혼란스럽네요.  **  </typo>
----
> 아닙니다. 먼저 root 찾고, 그 다음에 chosen같은 node를 찾아서 가는 것입니다.
>
> 하나의 node에 여러 property가 존재할 수 있습니다. 여기서는 chosen이라는 node안에 initrd같은 property가 존재한다고 할 수 있습니다.
>
> exynos5420-smdk5420.dts파일을 열어 보면, 다음과 같이 구분할 수 있습니다.
> 하나 덧붙이면, 제일 위에 있는 model과 compatible은 node가 아니라 property입니다.
>
> {{ :스터디:node_property.png?direct |}}
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 2) 그런데 binary와 비교해 보면, 순서대로 컴파일되는 것 같지는 않아 보이네요?  **  </typo>
----
> 확실히 dts파일을 보면, memory -> chosen 순서지만,
> dtb에서는 chosen -> memory 순으로 보여집니다.
> {{ :스터디:dtb_node_sequence.png?direct |}}
>
> 아마도 컴파일러가 어떤 방식을 적용해서 하는것 같습니다 다. 하지만 어차피 찾을 때 보면, 처음부터 찾기 때문에 여기서는 별 의미 없어 보입니다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 3) 예전에 device tree가 없었던 시절과의 차이점이 무엇이죠? 대체 device tree의 장점이 뭔가요?  **  </typo>
----
> 스터디 시작한지 5개월 밖에 안되었지만, 벌써 memory 부족 현상이 일어나는 것 같습니다. LOL
> 에빙하우스 기억법칙으로 극복! 합시다!
> 
> 아래는 [[http://iamroot.org/wiki/doku.php?id=%EC%8A%A4%ED%84%B0%EB%94%94:arm_kernel_%EC%8A%A4%ED%84%B0%EB%94%94_10%EC%B0%A8_full_%EB%B0%94%EB%A1%9C%EA%B0%80%EA%B8%B0#주차_20130706 | 11주차]] DT 정리글 입니다.
>>
>> "예전에는 device마다 kernel을 따로 지원해서 노가다가 심했는데, 요즘은 <fc #0000FF>kernel을 따로 만들어서 DT를 따로 운영하면서 
매번 빌드할 필요가 없어졌다.</fc>"
>>
>> DT를 지원하면, 가져다가 모든 시리즈를 커버할 수 있는 장점이 존재하고, 커널 이미지가 특정 하드웨어를 위해 따로 빌드할 필요가 없어진다. 커널을 빌드 할 때는 각각 CPU별로 커널 컴파일하는 설정 파일들이 별도로 존재하고 그에 따라서 커널 이미지가 만들어진다.
>>
>> 즉, zImage나 uImage를 커널 바이너리 이미지에 넣도록 빌드를 하고 각 타겟별로 Device Tree Blob만 바꿔주면, 각각의 타켓 보드에 맞는 부팅이 가능해진다. 
>>
>> 결국 <fc #0000FF>Architecture별로 빌드하여 배포되는 최신 커널 이미지를 바로 이용</fc>할 수 있게 된다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 4) depth값은 어떻게 계산할 수 있을까요?  **  </typo>
<code c>
pr_debug("search \"chosen\", depth: %d, uname: %s\n", depth, uname);
</code>
----
> 아래 code와 같이 node가 시작될때(BEGIN node), depth는 1개씩 증가합니다.
> <code c>
if (tag != OF_DT_BEGIN_NODE) {
       pr_err("Invalid tag %x in flat device tree!\n", tag);
       return -EINVAL;
}   
depth++;
</code>
> exynos5420-smdk5420.dts파일을 열어보면, "memory", "chosen"과 같이 각 node가 시작하면 depth가 1씩 증가합니다.
> <code>
#include "exynos5420.dtsi"

/ {
        model = "Samsung SMDK5420 board based on EXYNOS5420";
        compatible = "samsung,smdk5420", "samsung,exynos5420";

        /* ARM10C 20131012 */
        memory {
                reg = <0x20000000 0x80000000>;
        };  

        chosen {
                bootargs = "console=ttySAC2,115200 init=/linuxrc";
        };  

        fixed-rate-clocks {
                oscclk {
                        compatible = "samsung,exynos5420-oscclk";
                        clock-frequency = <24000000>;
                };  
        };  
};
</code>
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 5) dtb랑 비교해 보면, 좀 이상합니다. 아래 code에서는 depth가 1인 경우만 정상 결과로 인정하는 것 같네요.  **  </typo>
<code c>
if (depth != 1 || !data ||
    (strcmp(uname, "chosen") != 0 && strcmp(uname, "chosen@0") != 0)) 
        return 0;
</code>
{{ :스터디:depth_source.png?direct |}}
----
> depth값은 최초 -1로 초기화 되어 있습니다.
> 따라서 위와같이 0001을 전부 BEGIN node라고 생각하면, depth는 4라고 생각하는 것이 정상입니다.
>
> 무엇이 문제인지 code를 하나씩 따라가 보겠습니다.
> {{ :스터디:depth_cal.png?direct |}}
> ①: 최초 depth는 -1로 시작합니다.
> ②: 쭉 scan하다가 0001의 BEGIN NODE를 만나고, depth값을 1개 증가 시켜서 0이 됩니다.
> ③: 콜백 함수를 수행하지만, depth값이 1이 아니기 때문에(현재 depth=0)
> ④: 0을 리턴합니다.
> ⑤: 다시 scan하다가 0003의 PROPERTY를 만납니다.
> ⑥: sz(size)에는 0004가 들어오고,
> ⑦: p는 0001을 가르키게 됩니다.
> ⑧: p에 sz값이 증가되어 0001을 건너띄고
> ⑨: continue를 통해 다시 loop을 반복합니다.
>
> 위와같은 실행을 통해 2~4번째 0001은 depth값을 증가시키지 않습니다.
>
> 증가가 되지 않는 이유는, <wrap em>2~4 번째 0001은 node를 나타내는 숫자가 아니기 때문입니다.</wrap>
> 여기서의 0001은 root node property(address-cells, size-cells 등)의 값을 나타내는 숫자이기 때문에, 
> <wrap em>1번째와 5번째의 0001만 node</wrap>로 카운팅 되어서 depth는 1이 됩니다.
>
> 참~~~~ 쉽죠잉? LOL
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 6) initrd의 장점이 무엇인가요? **  </typo>
----
> 결론부터 말씀드리면, 부팅시간을 줄일 수 있습니다.
> 
> kernel의 경우 library등 전부 다 집어 넣으면 사실 initrd가 필요없습니다.
> 하지만 kernel을 작게 만들려면 initrd가 필요하겠죠.
> 여기서는 부팅한 다음에 불러올 것이냐, 부팅하면서 불러올 것이냐의 문제로 보면 되겠네요.
>
> 예시로 Ubuntu의 경우 부팅 시 네트워크나 파일시스템을 전부 체크 하는데, 이런 기능을 빼고 부팅하면 속도가 단축될 것입니다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 7) 그렇다면 모바일의 경우 initrd가 안들어가지 않을까요? **  </typo>
----
> 모바일이라고 해도 부팅 방법이 여러개가 존재합니다.
> flash도 있고, network도 있는데 충분히 들어갈 수 있는 가능성은 많습니다.
>
> 생각보다 모바일도 cost 문제로 flash에서 부팅하지 않고 network로 받는 경우도 있습니다.
<box>
듀얼 부팅 모드 예
  - 보드 2장의 시스템 (A(control용) B(data processing용) 구성시 A, B가 다른 ip 주소를 갖고 있으며 B는 A에서 tftp로 부트이미지 download후 동작(Cost등의 이유로 A만 flash memory 장착
  - 같은 SoC를 stand-alone 시스템으로 구성시는 flash로 부팅
</box>
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 8) CONFIG_CMDLINE_FORCE의 의미가 무엇인가요? 아래 code가 잘 이해 안됩니다.  **  </typo>
<code c>
#ifdef CONFIG_CMDLINE // defined

#ifndef CONFIG_CMDLINE_FORCE // not defined
        if (!((char *)data)[0])
#endif
                strlcpy(data, CONFIG_CMDLINE, COMMAND_LINE_SIZE);
#endif /* CONFIG_CMDLINE */
</code>
----
> 말 그대로 입니다. 
> code가 조금 복잡해 보이지만, FORCE가 선언되어 있으면 이전 값이 무엇이든지 overwrite할 것이고, 
> 아니라면, data를 검사하고 저장할 것입니다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 9) root node에서 "#size-cells"이 저장된 곳은 어디일까요? dtb로는 찾기 어려워 보입니다.   **  </typo>
<code c>
 prop = of_get_flat_dt_prop(node, "#size-cells", NULL);
</code>
----
> 이것을 이해하기 위해서는 device tree 구조에 대해서 추가 지식이 필요합니다.
>
> <wrap em>1)</wrap> 먼저 dtb에서 찾아 보도록 하겠습니다.
> {{ :스터디:dt_sizecell.png?direct |}}
> 위 그림과 같이 size-cells는 다른 text와 같이 군집 형태로 존재함을 알 수 있습니다. <fc #0000FF>즉 여기서는 값을 찾을 수 없습니다.</fc>
>
>
> <wrap em>2)</wrap> 그럼 위와같은 현상은 왜 발생하는 것일까요? 아래 구조를 이해 하셔야 합니다.
> 
> {{ :스터디:fdt_prop.png?direct |}}
> 보시면 위와같이 len(길이)와, nameoff(오프셋)으로 구성되어 있음을 알 수 있습니다.
> 결국 name에서 offset을 더하여 값을 찾을 수 있다는 뜻입니다. 그래서 dtb로는 알 수 없습니다.
>
> 지겹게 봤던 "of_fdt_get_property()" 함수 기억 나시죠? 거기에 보면 아래 code와 같이 size와 offset을 구하는 부분이 있습니다.
> <code c>
void *of_fdt_get_property(struct boot_param_header *blob,
                       unsigned long node, const char *name,
                       unsigned long *size)
{


                sz = be32_to_cpup((__be32 *)p);
                noff = be32_to_cpup((__be32 *)(p + 4));

 ...
}
</code> 
>
> <wrap em>3)</wrap> 그럼 어떻게 값을 찾을 수 있을까요? 
> binary만 분석해도 알아낼 수 있겠지만... 참 노가다 스럽겠죠?
> 
> 여기서는 가장 최상위 include 파일인 "skeleton.dtsi"를 확인하여 알 수 있습니다. 값이 1임을 확인할 수 있습니다.
> {{ :스터디:dt_skeleton.png?direct |}}
>
> dtb blob 통한 분석은 아래와 같다.
> - node name을 string blob에서 찾아 offset을 계산.
> - 예를 들어 size-cells는 string 시작으로 부터 0x74에 위치하는 경우 
> - dtb의 0x0000_0003(FDT_PROP) 값에서 2번 째 32bit 값이 (len이후 nameoff위치) 0x74인 property를 찾음 
> - value는 0x74 값 뒤에 len 만큼의 값 (Big Endian format으로 변환 필요)
>
> DTB 구조를 간단한 dts와 비교하여 정리한 그림입니다.
> {{ :스터디:dtb_structure.png?direct |}}
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 10) 그렇다면 device tree에 중복되는 property가 있으면, 최상위 header 값을 써야 할까요?   **  </typo>
----
> dtb파일을 보면, 중복되지 않는 다면 merge하고, 같다면 overwrite 하는 것 같습니다.
> 
> 다음 그림과 같이 memory node에서 사용된 reg property값을 봅시다. reg가 중복 사용된 것을 보실 수 있습니다.
> {{ :스터디:dt_memory_cell.png?direct |}}
>
> 이제 dtb파일을 열어 보겠습니다. 파란 박스는 기억 나시죠? 0001이 BEGIN ~ 0002가 END 입니다.
> 여기서 빨간 박스는 reg값이 2000 0000 8000 0000 으로 저장되어 있고, skeleton에 있는 0 0은 없어진걸 확인할 수 있습니다.
> {{ :스터디:memory_reg.png?direct |}}
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 11) memory node를 찾는 함수는 왜 return값이 전부 0일까요? 이렇다면 무한 loop 아닌가요?  **  </typo>
----
> return이 전부 0이라도, 무한 loop는 아닙니다.
> END node를 만나면 break를 통해 빠져나올 수 있습니다.
> {{ :스터디:of_dt_end.png?direct |}}
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 12) cell의 값에 따라서 64bit read를 합니다. cell이 bit를 나타내는 것인가요?  **  </typo>
<code c>
static inline u64 of_read_number(const __be32 *cell, int size)
{
        u64 r = 0;
        while (size--)
                r = (r << 32) | be32_to_cpu(*(cell++));
        return r;
}
</code>
----
> 위에서 cell값이 1로 저장된 이유가 여기서 나오는 것 같습니다.
> device tree에 대한 그림을 보면 아래와 같이 나타낼 수 있습니다.
>
> 여기서 cells가 1이면 32bit, 2이면 64bit가 되는 것입니다.
> {{ :스터디:dt_cells.png?direct |}}
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 13) memory bank가 무엇인가요? 그리고 왜 ARM에서 bank 값을 8이나 쓸까요?  **  </typo>
<code c>
int __init arm_add_memory(phys_addr_t start, phys_addr_t size)
{
        struct membank *bank = &meminfo.bank[meminfo.nr_banks];

        if (meminfo.nr_banks >= NR_BANKS) {
                printk(KERN_CRIT "NR_BANKS too low, "
                        "ignoring memory at 0x%08llx\n", (long long)start);
                return -EINVAL;
        } 
</code>
----
> 먼저 bank의 정의를 하고 넘어갑시다.
> bank는 아래와 같이 2가지의 개념이 있다.
>   1. DRAM chip 안에서 bank address를 구성하는 단위로 동시에 접근 가능한 dram instance (보통 8, DDR4의 경우 bank grouping를 도입하여 16)
>   2. PC에서 메모리 슬롯의 의미 (DIMM, SIMM등의 메모리 모듈 단위)
> 우리가 보는 linux가 관리하는 메모리 bank는 2를 의미하나 통상적으로 1과 구분하기 위해 그냥 module이나 slot이라고 부른다.
> 
<box>
> 참고: PC에서 메모리 모듈 구성 사례
> 기본사항
>   - 1개의 DDR chip은 4 or 8 bit data bus(x4, x8)
>   - DDR3의 경우 8Gb, 2133MTs, DDR4는 16Gb, 3200MTs가 최대 용량 및 속도
>   - momory module은 이 chip을 병렬로 여러개 연결
> 사례: DDR3 8GB PC12800 메모리 모듈
>   - 8b data width의 8Gb DDR3 chip 8개 사용
>   - 8x8b = 64b interface @ 1600MHz (또는 128b@800MHz, IO Clock 기준)
>   - 1600MT/s * 64b/T = 12800 MB/s 
</box>
>
> 리눅스에서 memory bank란 접근 속도가 같은 memory의 집합을 의미합니다.
> UMA구조라면 한 개의 bank가 존재하고, NUMA 구조라면 복수개의 bank가 존재합니다.
> 리눅스에서는 bank를 표현하는 구조가 node(~/include/linux/mmzone.h)입니다. 
>
> 만약 UMA 구조의 시스템에서 리눅스가 수행된다면 한개의 node가 존재할 것이며, 이 node는 리눅스의 전역변수인 contig_page_data(~/mm/page_alloc.c)를 통해 접근 가능합니다.
> (Ref. : 리눅스 커널 내부구조)
>  {{ :스터디:node_bank.jpg?direct |}} 
>
> bank를 8개 사용한 것은 넉넉하게 잡은 것 같습니다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 14) <nowiki> ____machine_arch_type값이 무엇일까요? </nowiki>  **  </typo>
<code c>
__machine_arch_type = mdesc_best->nr;
</code>
----
> /include/generated/mach-types.h를 참조하면 predefined machine number를 확인 할 수 잇다.(0~4xxx)
> MACHINE_START로 정의된 구조체의 경우 이 값들이 machine number가 입력되고
> undefined의 경우 DT_MACHINE_START를 사용하여 machine number=~0UL(0xffffffff)으로 설정된다.
</WRAP>
</box>

\\

<box center round blue 95% | <typo fs:18px;> ** 2.  setup_arch()  ** </typo>>
\\
<WRAP center round box 95%>
<typo fs:16px;>
** 1) reboot mode를 다시 정리 할까요?  **  </typo>
<code c>
if (mdesc->reboot_mode != REBOOT_HARD)
                reboot_mode = mdesc->reboot_mode;
</code>
----
> 실제 하드웨어 디자인 할때 리셋방법이 여러가지 방법이 존재합니다.
> 
> HARD는 hardware적으로 reset 시그널이 있고, 소프트리셋 시그널이 따로 있습니다.
> 결국 HARD reset은 칩 전체 reset, SOFT는 칩중 일부분만 reset입니다.
> SOFT의 경우 이렇게 하는 이유는, 일부 IP의 경우 reset을 안하는 경우가 있어서 그렇습니다.
>
>   - REBOOT_COLD: 일반적으로 power on/off
>   - REBOOT_HARD: chip에 연결된 HW reset (PC에서 reset 버튼)
>   - REBOOT_WARM: chip에 연결된 HW reset (PLL, test logic 등의 일부 HW를 reset에서 제외, 주로 watchdog과 연결)
>   - REBOOT_SOFT: software에 의한 reset (ctrl+alt+reset 키)
>   - REBOOT_GPIO: GPIO signal에 의한 reset
> 
> 개념적으로는 구분이 있으나 실제 chip에서 SOFT, WARM등의 경계가 모호하다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 2) 아래 code는 변수가 아니라, lds파일에 있는 section이 맞나요?  **  </typo>
<code c>
init_mm.start_code = (unsigned long) _text;
init_mm.end_code   = (unsigned long) _etext;
init_mm.end_data   = (unsigned long) _edata; 
init_mm.brk        = (unsigned long) _end;
</code>
----
> linker script의 symbol이 맞다.
> 해당 변수는 /include/asm-generic/sections.h에 extern으로 선언되어 있으며
<code c>
extern char _text[], _stext[], _etext[];
extern char _data[], _sdata[], _edata[];
</code>
> compile 단계에서는 symbol table에 undefined symbol로 매핑한다.
> undefined symbol은 linker 수행시 linker script나 다른 c 파일의 symbol table 정보와 
> 연결하여 해당 정보를 갱신한다.
</WRAP>
</box>
\\
\\
\\
