==== 27주차(2013.10.26) ====
<box center round blue 95% | <typo fs:18px;> ** 1. setup_arch()->arm_memblock_init()  ** </typo>>
\\
{{ :스터디:figures:10차_armc:27주차:arm_memblock_init.jpg?direct |}}
\\
<WRAP center round box 95%>
<typo fs:16px;>
** 1) bank가 현재 2개(0, 1)이 존재하고, bank수 만큼 아래 code를 수행하니 2번 수행되지 않나요?  **  </typo>
<code c>
for (i = 0; i < mi->nr_banks; i++)
        memblock_add(mi->bank[i].start, mi->bank[i].size);
</code>
<code c>
int __init_memblock memblock_add(phys_addr_t base, phys_addr_t size)
{
        return memblock_add_region(&memblock.memory, base, size, MAX_NUMNODES);
}
</code>
<code c>
static int __init_memblock memblock_add_region(struct memblock_type *type,
                                phys_addr_t base, phys_addr_t size, int nid)
{
    ...
    if (type->regions[0].size == 0) { 
        WARN_ON(type->cnt != 1 || type->total_size);

        type->regions[0].base = base;
        type->regions[0].size = size;
        memblock_set_region_node(&type->regions[0], nid);

        type->total_size = size;
        return 0;
        
    ...
}  
</code>
----
> 인자의 위치 때문에 혼란이 온것 같습니다.
>
> 아래 그림을 보면 mi는 meminfo 구조체 포인터(DTB에서 저장)이고, type은 memblock_type 구조체 포인터 입니다.
> {{ :스터디:memblock.png?direct |}}
> 결국 base와 size는 meminfo(bank 0, 1)에서 온 값이고, type은 regions의 정보를 저장하는 memblock 구조체에서 왔습니다.
> meminfo와 memblock의 구조체를 다시한번 remind하면 아래와 같습니다.
> {{ :스터디:struct_compare_meminfo2.png?direct |}}
> 
> 1번째 loop에서는 size는 global 변수(<del>.bss</del>.data에 할당)이기 때문에 0으로 초기화 되어 있습니다. 따라서 해당구문을 수행하고, size의 값은 bank[0]의 size인 0x4f800000로 업데이트 됩니다.
> <WRAP center round tip 60%>
구조체중 일부분이 초기화되었으므로 .bss가 아니고 .data이다.
참고로 부분만 초기화된 global variable의 나머지 멤버는 0임 (C99 Standard 6.7.8.21) [[http://iamroot.org/wiki/doku.php?id=%EC%8A%A4%ED%84%B0%EB%94%94:arm_kernel_%EC%8A%A4%ED%84%B0%EB%94%94_10%EC%B0%A8_full_%EB%B0%94%EB%A1%9C%EA%B0%80%EA%B8%B0#%EC%A3%BC%EC%B0%A8_20130831|19주차]] 4-3)
</WRAP>
>
> 2번째 loop에서는 size값이 0이 아니기 때문에 점프합니다.
</WRAP>
<WRAP center round box 95%>
<typo fs:16px;>
** 2) repeat: 구문이 부분적으로는 이해가 되나, 전체 동작이 이해가 안갑니다.  **  </typo>
<code c>
repeat:
        /*
         * The following is executed twice.  Once with %false @insert and
         * then with %true.  The first counts the number of regions needed
         * to accomodate the new area.  The second actually inserts them.
         */
        base = obase;
        nr_new = 0;

        for (i = 0; i < type->cnt; i++) {
                struct memblock_region *rgn = &type->regions[i];

                phys_addr_t rbase = rgn->base;
                phys_addr_t rend = rbase + rgn->size;

                if (rbase >= end)
                        break;
                if (rend <= base)
                        continue;
                /*
                 * @rgn overlaps.  If it separates the lower part of new
                 * area, insert that portion.
                 */
                if (rbase > base) {
                        nr_new++;
                        if (insert)
                                memblock_insert_region(type, i++, base,
                                                       rbase - base, nid);
                }    
                /* area below @rend is dealt with, forget about it */
                base = min(rend, end);
        }

        /* insert the remaining portion */
        if (base < end) {
                nr_new++;
                if (insert)
                        memblock_insert_region(type, i, base, end - base, nid);
        }

        /*
         * If this was the first round, resize array and repeat for actual
         * insertions; otherwise, merge and return.
         */
        if (!insert) {
                while (type->cnt + nr_new > type->max)
                        if (memblock_double_array(type, obase, size) < 0)
                                return -ENOMEM;
                insert = true;
                goto repeat;
        } else {
                memblock_merge_regions(type);
                return 0;
        }
}
</code>
----
> 이 부분에 대해서는 많은 토론이 있었으나, 일단 큰 그림을 그려봅시다.
>
> repeat: 구문은 memblock을 정렬된 상태로 유지하려 하는 것입니다. 
> <WRAP center round tip 60%>
memblock을 정렬된 구조체로 유지하는 이유: 관리(탐색) 목적
memblock_is_memory(), memblock_is_reserved(), memblock_is_region_memory() 등에서 사용하는 
memblock_search()함수의 경우 address로 탐색(binary search)
해당 memblock search 정렬되어 있지않은 경우 full search로 인한 연산 낭비 발생
</WRAP>
>
> 현재는 들어오기 전에 heap-sort를 통하여 정렬해둔 상태라 순차적으로 넘버링 되겠지만, 이 함수 자체는 정렬이 되어 있지 않은 상태에서도 정렬을 해줄 수 있습니다.
> 
> 정렬이 뒤틀려 버리는 경우는 hotswap(hotplug) 또는 reserved 영역을 추가의 비정렬성 등의 이유가 있습니다. 
> <WRAP center round tip 60%>
hotplug 예: ./arch/powerpc/platforms/pseries/hotplug-memory.c에서 memblock_add()를 호출
reserved 예: kernel image@0xc0008000, page table@0xc0004000을 reserved 영역으로 추가시 비 순차적
</WRAP>
>
> 함수 자체는 1) 새로운 region의 insert, 2) 인접된 영역의 merge, 3) overlap된 부분을 고려하고 있습니다.
>> 스터디 시간에는 overlapping case를 hotswap memory 증/감설에 따른 사례로 설명하였으나 reserved에 의한 추가 사례로도 설명 가능
> <WRAP center round tip 60%>
overlapping 예: 
module(memA)와 특정 버퍼(memB)이 있고 둘다 reserved에 추가하고 서로 포함 관계인 경우 (memA includes memB)
memB가 reserved인 상태에서 memblock_add_region(reserved, memA)시 overlapping condition 구문으로 처리 
</WRAP>
>
> 자~ 언제나 멘붕타임에는 강의 시작!!
> 이 code를 제대로 이해하기 위해서, <wrap em>가상의 예제</wrap>를 들어 보겠습니다. 일단 다음과 같이 메모리와 bank가 존재한다고 가정합시다.(meminfo와 memblock_type은 16진수)
> {{ :스터디:repeat_flow_init.png?direct |}}
>
> <wrap em><typo fs:18px;> 1) arm_memblock_init()함수를 실행할 경우 </typo> </wrap>
>
> arm_memblock_init()함수에서는 전체 bank를 찾아서 regions에 등록하는 과정을 거칩니다.
> <code c>
void __init arm_memblock_init(struct meminfo *mi, struct machine_desc *mdesc)
{
        int i;

        for (i = 0; i < mi->nr_banks; i++)
                memblock_add(mi->bank[i].start, mi->bank[i].size);
         ...
</code>
> 결과는 다음 그림과 같이 <wrap em>각 regions에 할당된 모습</wrap>을 보여줍니다.
> {{ :스터디:repeat_flow_init_result.png?direct |}}
>
>> <wrap em>※ 이해되시면 바로 2)번으로 가세요~</wrap>
>> {{ :스터디:repeat_flow_init_result_0_1.png?direct |}}
>>
>> <fc #800000>**1-1) arm_memblock_init()의 1번째 loop: bank[0]**</fc>
>> : bank[0]의 loop에서는 ①~③의 과정을 수행합니다. 
>>
>> ①: obase, end값을 bank[0]의 start값, start+size값을 설정합니다.
>>
>> ②: regions[0]은 현재 아무값도 설정되어 있지 않기 때문에, size도 0입니다. 그래서 if문을 수행하여 regions[0]에 base와 size, total_size 값을 저장합니다.
>>
>> ③: return을 통해 loop를 빠져 나갑니다.
>> 
>> 여기까지의 결과는 다음 그림과 같습니다.
>> {{ :스터디:repeat_flow_init_result_1_1.png?direct |}}
>>
>> <fc #800000>**1-2) arm_memblock_init()의 2번째 loop: bank[1]**</fc>
>> : bank[1]의 loop에서는 ④~⑩의 과정을 수행합니다. (④~⑦은 1번째 repeat, ⑧~⑩은 2번째 repeat)
>>
>> ④: bank[1]은 regions[0].size가 존재하기 때문에 repeat: 문을 수행합니다. base값은 자신의 base값으로 수정합니다. 여기서는 bank[1]이니, 0x2000_0000이 되겠네요.
>>　그리고 for문을 수행하면서 rbase, rend값을 수정합니다. 여기서 'r'의 의미는 region을 뜻합니다. type->cnt는 현재 region의 개수를 뜻합니다. 
>> 
>> ⑤: rbase(0x1000_0000)는 bank[1]의 end값(0x2000_1000)보다 작기 때문에 넘어가고, rend(0x1000_1000)이 base값(0x2000_0000)보다 작기 때문에 continue를 통해서 for문을 빠져 나갑니다.
>>
>> ⑥: base(0x2000_0000)이 end(0x2000_1000)보다 당연히! 작기 때문에 if문을 수행하지만 insert는 현재 false 이므로, ⑦번으로 넘어갑니다.
>>
>> ⑦: insert값을 true로 변경하고 다시 repeat을 수행합니다.
>>
>> 여기까지의 결과는 다음 그림과 같습니다.
>> {{ :스터디:repeat_flow_init_result_2.png?direct |}}
>>
>> ⑧: 2번째 repeat을 반복하지만 이전과 같은 code를 수행하고, continue만을 만나 for문을 빠져 나갑니다.
>>
>> ⑨: insert가 현재 true이므로, memblock_insert_region()함수를 수행합니다. 이전의 for문에서 break를 수행했다면 insert를 수행하겠지만, continue를 수행했기 때문에 단순히 <wrap em>regions[1]에 bank[1]의 base와 size를 저장</wrap>합니다. 이제 regions가 2개가 되었으니 type->cnt도 2가 됩니다.
>> 
>> ⑩: region 영역이 붙어있다면, 병합하는 memblock_merge_regions()를 수행하겠지만, 우리는 떨어져 있으니 pass합니다.
>>
>> 이제 결과를 보면 다음과 같이 되었습니다.
>> {{ :스터디:repeat_flow_init_result_3.png?direct |}}
>>
>> <fc #800000>**1-3) arm_memblock_init()의 3번째 loop: bank[2]**</fc>
>> : bank[2]의 loop에서는 앞의 과정을 그대로 수행합니다.
>> 
>> ⑪: 인제 쉽죠? 앞이랑 계속 똑같습니다. 사실 주소값 기반으로 이미 정렬이 되어 있기 때문에 3번째 loop도 2번째와 결과는 같습니다. 다른 점은 <wrap em>cnt값이 2로 증가</wrap>되어 for문을 2번 반복할 뿐입니다. insert 직전까지의 결과는 다음 그림과 같습니다.
>> {{ :스터디:repeat_flow_init_result_4.png?direct |}}
>> 
>> ⑫: insert를 수행하지만, 앞의 과정과 같이 <wrap em>regions[2]에 bank[2]의 base와 size를 저장</wrap>합니다. 이제 regions가 3개가 되었으니 type->cnt도 3이 됩니다.
>> 
>> ⑬: ⑩과 마찬가지로 pass합니다.
>> {{ :스터디:repeat_flow_init_result_5_2.png?direct |}}
>
>
> <wrap em><typo fs:18px;> 2) 위의 결과에 새로운 bank가 추가되는 경우 </typo></wrap>
>
> 여태까지 우리는 정렬된 bank만 가지고 코드를 봤습니다. 여기에 다음과 같이 새로운 bank가 들어온다면 어떻게 되는지 짚고 넘어가죠. code는 다음과 같이 수행되었다고 가정 하겠습니다.
> <code c>
       memblock_add(mi->bank[3].start, mi->bank[3].size);
</code>
> {{ :스터디:repeat_flow_add.png?direct |}}
> 결과는 다음 그림과 같이 <wrap em>bank[3]이 추가된 모습</wrap>을 보여줍니다.
> {{ :스터디:repeat_flow_add_result.png?direct |}}
>
>> <wrap em>※ 이해되시면 바로 3)번으로 가세요~</wrap>
>> {{ :스터디:repeat_flow_add_result_0_1.png?direct |}}
>>
>> <fc #800000>**- bank[3] 삽입 과정 **</fc>
>> : 앞의 초기화 과정과 비슷하므로, 간략하게 적겠습니다.
>>
>> ①: regions[0]의 base와 size값을 rbase, rend에 저장하여 region 범위를 지정합니다.
>>
>> ②: bank[3]의 end(0x0000_1000)값이 rbase(0x1000_0000)보다 작으므로, break를 걸고 loop을 빠져 나갑니다.
>>
>> ③: insert가 false여서 다음으로 점프합니다.
>> 
>> ④: insert flag를 true로 설정하고, 다시 repeat문을 반복합니다. 여기까지 정리하면 다음 그림과 같습니다.
>>
>> {{ :스터디:repeat_flow_add_result_1.png?direct |}}
>>
>> ⑤: ②와 마찬가지로 break문을 수행합니다.
>>
>> ⑥: memblock_insert_region()함수를 수행합니다. memmove()함수를 수행하는데 cnt가 현재 3이고(region이 총 3개), idx가 0이기 때문에 총 3개의 region을 하나씩 뒤로 밀면서 복사를 수행합니다.
>>
>> ⑦: 인접한 region 영역이 없기 때문에, pass합니다. insert 진행 후 최종 결과는 다음과 같습니다.
>> {{ :스터디:repeat_flow_add_result_2.png?direct |}}
>
> <wrap em><typo fs:18px;>3) 인접한 bank가 추가되는 경우</typo></wrap>
>
> 이제 인접한 영역이 bank가 들어오면 어떻게 되는지 알아 봅시다.
> <code c>
       memblock_add(mi->bank[4].start, mi->bank[4].size);
</code>
> {{ :스터디:repeat_flow_merge.png?direct |}}
> 결과는 다음 그림과 같이 <wrap em>bank[0], bank[4]가 하나의 regions로 통합된 모습</wrap>을 보여줍니다.
> {{ :스터디:repeat_flow_merge_result_fix.png?direct |}} 
>
>> <wrap em>※ 이해되시면 바로 4)번으로 가세요~</wrap>
>> {{ :스터디:repeat_flow_merge_result_0.png?direct |}}
>>
>> <fc #800000>**- 인접된 영역의 merge    **</fc>
>>
>> ①: loop를 돌며 regions[0]의 base와, size값을 rbase, rend에 저장합니다. 
>>
>> ②: regions[0]의 base와 size값은 현재 저장하는 bank의 크기보다 작기에 continue문을 통해 넘어갑니다. 마찬가지로 regions[1]도 넘어갑니다.
>>
>> ③: regions[2]에서 저장된 rbase와 비교하면 현재 bank의 end값이 작기에 break문을 통해 빠져 나갑니다. insert 직전까지의 결과는 다음 그림과 같습니다.
>> {{ :스터디:figures:10차_armc:27주차:repeat_flow_merge_result_fix1.png?direct |}}
>>
>> ④: repeat: 문을 다시 수행하여 memblock_insert_region을 통해 현재 bank을 insert합니다. 현재까지 결과는 다음과 같습니다.
>> {{ :스터디:figures:10차_armc:27주차:repeat_flow_merge_result_fix2.png?direct |}}
>>
>> ⑤: regions[1], regions[2]가 인접된 영역이므로, memblock_merge_regions()함수를 수행하여 size값을 더하여 merge합니다. 최종 그림은 위에 있으니 생략 합니다.
>
>
> <wrap em><typo fs:18px;>4-1) 위쪽 영역으로 overlap 되는 경우</typo></wrap>
>
> overlap은 위쪽 영역이 overlap 되는 경우와, 아래쪽으로 overlap되는 경우로 구분됩니다.
> 먼저 위쪽으로 overlap되는 경우를 살펴봅시다. 다음 그림과 같이 overlap되는 bank[5]를 추가 한다고 가정합니다.
> 
> {{ :스터디:figures:10차_armc:27주차:repeat_flow_upper_overlap2.png?direct |}}
> 결과는 다음 그림과 같이 <wrap em>bank[0], bank[4], bank[5]가 하나의 regions로 통합된 모습</wrap>을 보여줍니다.
> 하지만 <wrap em>overlap된 영역</wrap>(0x1000_1800 ~ 0x1000_2000)은 따로 이동해서 merge하는 것이 아니라, <wrap em>그냥 무시</wrap>해 버립니다.
>
> {{ :스터디:figures:10차_armc:27주차:repeat_flow_upper_overlap_result2.png?direct |}}
>
> code를 통해 overlap 부분을 살펴보면, 다음과 같이 upper overlap이 되는 경우 예제에서는 bank[5]의 end값과 rend값의 min값을 설정하기 때문에 결국 bank[5]의 base값을 0x1000_2000 이라 가정해 버립니다.
>
> {{ :스터디:figures:10차_armc:27주차:repeat_flow_upper_overlap_code.png?direct |}}
>
>
> <wrap em><typo fs:18px;>4-2) 아래쪽 영역으로 overlap 되는 경우</typo></wrap>
>
> 아래쪽으로 overlap되는 경우도 같은 원리입니다. 다음 그림과 같이 overlap되는 bank[6]을 추가 한다고 가정합니다.
> 
> {{ :스터디:figures:10차_armc:27주차:repeat_flow_lower_overlap2.png?direct |}}
> 결과는 위쪽 영역으로 overlap 되는 경우와 마찬가지로 <wrap em>overlap된 영역</wrap>(0x1000_0000 ~ 0x1000_0800)은 <wrap em>무시</wrap>해 버립니다.
>
> {{ :스터디:figures:10차_armc:27주차:repeat_flow_lower_overlap_result3.png?direct |}}
>
> code를 통해 overlap 부분을 살펴보면, lower overlap되는경우에는 "rbase > base"의 조건을 만족하기 때문에 바로 insert 구문을 수행합니다. 하지만 기존의 insert와 다른점은 size 대신 "rbase-base"를 size로 넘긴다는 점입니다. 결국 overlap되는 부분은 무시해 버립니다.
>
> {{ :스터디:figures:10차_armc:27주차:repeat_flow_lower_overlap_code.png?direct |}}
>
> :!: 의견> merge쪽의 memmove 성능이 나쁜 점을 고려할 때 개선의 여지가 필요해 보임.
>
>
> 자 그럼 이제 우리가 스터디 하고 있는 시스템에 적용해 보면 다음과 같이 regions가 설정 됩니다.
> {{ :스터디:10th_armc_memory_0.png?direct&500 |}}
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 3) 그렇다면 memblock_add() 함수 자체가 나중에도 계속 사용된다는 뜻인가요? 하지만 <nowiki> __init_memblock </nowiki>이 선언되어 있어서 초기화 하고 삭제되지 않을까요? **  </typo>
<code c>
int __init_memblock memblock_add(phys_addr_t base, phys_addr_t size)
{
        return memblock_add_region(&memblock.memory, base, size, MAX_NUMNODES);
}
</code>
----
> <nowiki> __init_memblock</nowiki>은 exynos5420의 경우 normal .text 영역이기 때문에 init섹션은 아닙니다. 따라서 초기화 되지 않을 것입니다.
> 참고로 아래 코드에서 ARCH_DISCARD_MEMBLOCK시 .meminit.text section으로 설정되며 MEMORY_HOTPLUG를 위해 사용된다.
> MEMORY_HOTPLUG는 mm/Kconfig를 살펴보면 현재 일반적인 ARM시스템에서는 사용하지 않으나 X86, PPC등의 
> SPARSEMEM/NUMA system에서 hotplug시 config된다.
> <code c>
#ifdef CONFIG_ARCH_DISCARD_MEMBLOCK
  #define __init_memblock __meminit
  #define __initdata_memblock __meminitdata
#else
  #define __init_memblock
  #define __initdata_memblock
#endif

//include/linux/init.h
/* Used for MEMORY_HOTPLUG */
#define __meminit        __section(.meminit.text) __cold notrace
#define __meminitdata    __section(.meminit.data)
</code>
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 4) memblock_double_array() 함수의 역할은 무엇일까요?  **  </typo>
<code c>
if (!insert) {
        while (type->cnt + nr_new > type->max)
                if (memblock_double_array(type, obase, size) < 0) 
                        return -ENOMEM;
</code>
----
> max는 현재 128로 선언되어 있습니다. regions를 카운트 하여 128을 넘어 가게 되면 doubling을 통해 memblock을 추가로 잡습니다. 
> nr_new 변수가 128을 넘어가는지 체크하는 변수입니다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 5) 그런데 memory가 위와같이 동적으로 변경될 수 있나요? **  </typo>
----
> 충분히 가능합니다. 시스템의 부착되어 있는 memory를 변경하면 regions가 수정됩니다.
> 아래 두 경우 memory hotplug를 상상해보자.(이해를 돕기위해 가정한 예이며 실제와는 다를 수 있습니다.)
> <code asm>
case1: 0xA000_0000 주소에 메모리가 추가하여 중간위치에서 memblock_add 
----------------------------------------------------------------
|  memory slot#  |  address     | 변경전 적재 | -> | 변경후 적재 |
----------------------------------------------------------------
|  memory slot1  |  0x80000000  |     O      | -> |     O      |
|  memory slot2  |  0xA0000000  |     X      | -> |     O      |
|  memory slot3  |  0xC0000000  |     O      | -> |     O      |
|  memory slot4  |  0xE0000000  |     X      | -> |     X      |
----------------------------------------------------------------

case2: 0x8000_0000의 size 증설로 overlapping 및 merge
---------------------------------------------------------------------------------------------------
|  memory slot#  |  address     | 변경전 적재 |             | -> | 변경후 적재 |                    |  
---------------------------------------------------------------------------------------------------
|  memory slot1  |  0x80000000  |  O(256MB)  |  region[0]  | -> |  O(512MB)  |  region[0]         |
|  memory slot2  |  0xA0000000  |  O(256MB)  |  region[1]  | -> |  O(256MB)  |  region[0], merged |
---------------------------------------------------------------------------------------------------
</code>

</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 6) _stext는 code의 시작이었는데, _end는 code의 end지점 인가요? **  </typo>
----
> 전체의 end입니다. code의 end는 _etext입니다.
> 이거 전체 그려놓은 그림 어디선가 봤는데 못찾겠네요. 기억 나시는분 계신가요? FIXME
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 7) <nowiki>__builtin_return_address </nowiki>가 무엇인가요? **  </typo>
<code c>
#define _RET_IP_                (unsigned long)__builtin_return_address(0)
</code>
----
> 오랫만에 보는 새로운 확장 기능입니다.
> 
> <nowiki>__builtin_return_address </nowiki>는 자신을 호출한 함수의 반환 위치 주소를 돌려 줍니다.
> arm으로 하면 현재 상태에서의 lr을 반환해 줍니다.
> (Ref.: [[http://forum.falinux.com/zbxe/index.php?document_srl=550242&mid=lecture_tip | gcc 확장기능 이용하기 - __builtin_return_address]])
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 8) memblock_type의 memory와 reserved의 차이점은 무엇일까요? **  </typo>
<code c>
int __init_memblock memblock_reserve(phys_addr_t base, phys_addr_t size)
{
        struct memblock_type *_rgn = &memblock.reserved;

        memblock_dbg("memblock_reserve: [%#016llx-%#016llx] %pF\n",
                     (unsigned long long)base,
                     (unsigned long long)base + size,
                     (void *)_RET_IP_);

        return memblock_add_region(_rgn, base, size, MAX_NUMNODES);
}
</code>
----
> 위의 1-1) memblock 구조체 그림에서 memory와 reserved 구조체가 있습니다.
>
> 여기서 memory는 물리적으로 쓸 수 있는 영역을 설정한 것이고, reserved는 사용하지 말아야 할 부분을 설정한 것입니다.
> 위의 code에서는 kernel이 사용하는 영역을 reserved 영역으로 설정하였습니다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 9) phys_initrd_start의 주소를 어떻게 알 수 있나요? **  </typo>
<code c>
if (phys_initrd_size) {

        memblock_reserve(phys_initrd_start, phys_initrd_size);

        /* Now convert initrd to virtual addresses */
        initrd_start = __phys_to_virt(phys_initrd_start);
        initrd_end = initrd_start + phys_initrd_size;
} }
</code>
----
> phys_initrd_start, phys_initrd_size는 부트로더가 넘겨주는 것이기 때문에, 여기서는 알 수 있는 방법이 없습니다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 10) page table을 swapper_pg_dir이라고 명칭되어 있는데, 왜 이런 이름을 붙였을까요? **  </typo>
<code c>
void __init arm_mm_memblock_reserve(void)
{
        /*
         * Reserve the page tables.  These are already in use,
         * and can only be in node 0.
         */
        memblock_reserve(__pa(swapper_pg_dir), SWAPPER_PG_DIR_SIZE);
        
#ifdef CONFIG_SA1111
        /*      
         * Because of the SA1111 DMA bug, we want to preserve our
         * precious DMA-able memory...
         */
        memblock_reserve(PHYS_OFFSET, __pa(swapper_pg_dir) - PHYS_OFFSET);
#end
</code>
----
> page table은 당연히 컨텍스트 스위칭 시 swap이 발생되어서 그렇게 네이밍을 한 것으로 보입니다.
> 
> 이 경우 2차 table은 그대로 놓고 사용하고, 1차 table만 스위칭 합니다. 1차 table에서도 kernel 영역에 해당하는 부분은 바뀌지 않습니다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 11) PTRS_PER_PGD가 공부할때는 4096으로 배웠는데 왜 2048로 정의되어 있을까요?  **  </typo>
<code c>
#define SWAPPER_PG_DIR_SIZE     (PTRS_PER_PGD * sizeof(pgd_t))
</code>
----
> 일단 주석에 보면 다음과 같은 그림을 제공하고 있습니다.
> <code c>
 *    pgd             pte
 * |        |
 * +--------+
 * |        |       +------------+ +0
 * +- - - - +       | Linux pt 0 | 
 * |        |       +------------+ +1024
 * +--------+ +0    | Linux pt 1 |
 * |        |-----> +------------+ +2048
 * +- - - - + +4    |  h/w pt 0  |
 * |        |-----> +------------+ +3072
 * +--------+ +8    |  h/w pt 1  |
 * |        |       +------------+ +4096
 *
</code>
> 
> 일단 용어 정의부터 하면 pgd는 1차 테이블, pte 2차 테이블 입니다. 1차 테이블은 1MB씩 섹션을 지정하였고, 2차 테이블은 4KB씩 page를 지정 하였습니다.
> 
> 1차 테이블(pgd) 크기: 4096 엔트리x4byte = 16KB
> 2차 테이블(pte) 크기: 256 엔트리x4byte = 1KB
>
> {{ :스터디:ptrs_per_pgd_2.png?direct&600 |}}
> Linux pt와 h/w pt의 차이점을 살펴보면, linux가 pte를 이용하는 경우 present, accessed, read/write, dirty 플래그를 사용합니다.
> 하지만 실제 h/w 에서는 이런 플래그가 지원이 안되는 부분입니다. 따라서 커널이 이런 기능을 제공하기 위해서 linux pt와 h/w pt를 같이 사용합니다.
>
> 그리고 왜 2개씩 pair로 관리를 하는지 생각해 봐야 하는데, 1개씩 사용하면 1kB라 align이 안맞습니다. 따라서 4개를 묶어서 4KB로 align을 하여 사용합니다.
>
> 결국 2048로 정의된 이유는 pair(linux-h/w)로 보기 위해서 그렇습니다.
>>
>> linux pt는 어디서 관리할까요?
>> 
>> 초기에 pgd 할당하는 부분이.. arch/arm/mmu.c에서 다음과 같이 할당 하는 것으로 보입니다.
>> <code c>
static pte_t * __init early_pte_alloc(pmd_t *pmd, unsigned long addr, unsigned long prot)
{
        if (pmd_none(*pmd)) {
                pte_t *pte = early_alloc(PTE_HWTABLE_OFF + PTE_HWTABLE_SIZE);
                __pmd_populate(pmd, __pa(pte), prot);
        }
        BUG_ON(pmd_bad(*pmd));
        return pte_offset_kernel(pmd, addr);
}
</code>
>> 따라서 위의 그림처럼 4k page를 할당하고 pmd_populate에서 상위 2M(여기선 2048 ~4096)의 entry 를 PGD에 할당합니다.
>> 그리고 리턴 주소는 0번지인 Linux pt0 이라고 생각합니다. (아직 확인되지 않음)
>> 그래서 linux pt는 pte_offset_kernel로 구하거나 h/w pt 에서 2M 빼면 될 것 같습니다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 12) dtb의 reserve_map이 무슨 의미 인가요?  **  </typo>
<code c>
reserve_map = ((void*)initial_boot_params) +
                be32_to_cpu(initial_boot_params->off_mem_rsvmap);

</code>
----
> Documentation/devicetree의 off_mem_rsvmap을 살펴보면 다음과 같이 정의 되어 있습니다.
>>
>> This is an offset from the beginning of the header to the start of the reserved memory map. This map is a list of pairs of 64-bit integers. Each pair is a physical address and a size. The list is terminated by an entry of size 0. This map provides the kernel with a list of physical memory areas that are "reserved" and thus not to be used for memory allocations, especially during early initialization. The kernel needs to allocate memory during boot for things like un-flattening the device-tree, allocating an MMU hash table, etc... 
>
> 요약하면 devicetree의 reserve map이라고 보면 됩니다.
>
> devicetree에서 video/audio accelerator가 DDR의 특정 영역을 buffer로 사용하는 경우 reserve map을 통해 o/s의 사용을 제한 할 수 있다.
>> Exynos5250의 MFC의 경우 dtb의 reserve map이 아닌 machine_desc.reserve function을 통해 추가 reserve 설정
> 해당 영역 설정시 dts에서 root node밖에 "/memreserve/ 64b_addr, 64b_val;"의 문법으로 설정 추가한다.
> <WRAP center round tip 80%>
  * dtb의 reserve_map 사용예
 다음은 arch/arm/boot/dts/exynos5440-sd5v1.dts를 변경하여 임의로 0x2000_0000~0x20ff_ffff의 16MB를 reserved로 설정해본 예이다.
<code asm>
/* arch/arm/boot/dts/exynos5440-sd5v1.dts */
/dts-v1/;
/memreserve/ 0x20000000 0x00000100;
/include/ "exynos5440.dtsi"
/ {
</code>
  * dtb head dump 결과
 붉은 색이 <fc #FF0000>off_mem_rsvmap</fc>, 파란색이 <fc #0000FF>address 및 size</fc>
  * 00000000  d0 0d fe ed 00 00 10 d1  00 00 00 48 00 00 0f 50  |...........H...P|
  * 00000010  <fc #FF0000>00 00 00 28</fc> 00 00 00 11  00 00 00 10 00 00 00 00  |...(............|
  * 00000020  00 00 01 81 00 00 0f 08  <fc #0000FF>00 00 00 00 20 00 00 00</fc>  |............ ...|
  * 00000030  <fc #0000FF>00 00 00 00 01 00 00 00</fc>  00 00 00 00 00 00 00 00  |................|
  * 00000040  00 00 00 00 00 00 00 00  00 00 00 01 00 00 00 00  |................|
  * 00000050  00 00 00 03 00 00 00 04  00 00 00 00 00 00 00 01  |................|
</WRAP>
</WRAP>
<WRAP center round box 95%>
<typo fs:16px;>
** 13) CMA가 무엇인가요?  **  </typo>
<code c>
void __init dma_contiguous_reserve(phys_addr_t limit)
{
        phys_addr_t selected_size = 0;
        
        pr_debug("%s(limit %08lx)\n", __func__, (unsigned long)limit);
                
        if (size_cmdline != -1) {
                selected_size = size_cmdline;
        } else {
#ifdef CONFIG_CMA_SIZE_SEL_MBYTES 
                selected_size = size_bytes;
#elif defined(CONFIG_CMA_SIZE_SEL_PERCENTAGE) 
                selected_size = cma_early_percent_memory();
#elif defined(CONFIG_CMA_SIZE_SEL_MIN) 
                selected_size = min(size_bytes, cma_early_percent_memory());
#elif defined(CONFIG_CMA_SIZE_SEL_MAX) 
                selected_size = max(size_bytes, cma_early_percent_memory());
#endif  
        }

</code>
----
> iamroot에서 언급한 자료가 있어서 링크 겁니다. [[http://www.iamroot.org/xe/Kernel_8_x86/43083 | CMA]]
>
> CMA는 Contiguous Memory Allocation의 약자로 "연속 메모리 할당"을 의미하며 프로그램을 연속된 메모리 공간 내에 할당하는 기법입니다.
> 그러나 이 방법은 기억장치의 최대 메모리보다 할당될 프로그램의 용량이 더 크면 할당이 되지 않는다는 문제점이 있어서 초기 주기억장치 할당 방법으로 잠깐 사용했다가, (뭐 물론 도중에 Overlay 기법 등이 등장했었습니다만) 요즘은 사용하지 않습니다.
>
> 요즘은 Non-Contiguous memory allocation을 쓰는데.. 산재할당이라 부르더군요:) 이 방법은 프로그램을 조각조각 나누어(Fregmentation) 메모리에 적재하는 기법입니다.
</WRAP>
</box>
\\

<box center round blue 95% | <typo fs:18px;> ** 2. setup_arch()->paging_init()  ** </typo>>
\\
{{ :스터디:paging_init2.jpg?direct |}}
\\
<WRAP center round box 95%>
<typo fs:16px;>
** 1)  CR_XP가 (1<<23)번째 비트로 나오는데, A.R.M에는 없네요. 어떻게 해석해야 하나요?  **  </typo>
<code c>
if (cpu_is_xsc3() || (cpu_arch >= CPU_ARCH_ARMv6 && (cr & CR_XP))) {
        if (!cpu_is_xsc3()) {
                /*
                 * Mark device regions on ARMv6+ as execute-never
                 * to prevent speculative instruction fetches.
                 */

                mem_types[MT_DEVICE].prot_sect |= PMD_SECT_XN;
                mem_types[MT_DEVICE_NONSHARED].prot_sect |= PMD_SECT_XN;
                mem_types[MT_DEVICE_CACHED].prot_sect |= PMD_SECT_XN;
                mem_types[MT_DEVICE_WC].prot_sect |= PMD_SECT_XN;
        }

     ...
</code>
----
> Reserved로 나오는데, XP는 무슨 말인가요?
> {{ :스터디:cr_xp.png?direct |}}
> armv7용 AARM(DDI0406)이 아닌 다른 아키텍처 버전용을 AARM(DDI0100)을 참조하라.
>
> 요약하면 다음과 같다.
> ARMv4/v5의 경우 1개 page를 4개 subpage로 나누어(64kB->16kB 또는 4kB->1kB) Access Permission 부여하는 기능을 지원한다.
> ARMv6이상부터는 MPCore 등장에 따라 global, shared 구분 및 supersection 등을 도입하고 이를 extended page(XP=1)로 명명.
> ARMv7은 subpage 기능을 삭제함에 따라 XP=1만 지원하고 이에 따라 해당 bit는 reserved.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 2) TEX remap에 관하여 나오는데, 이걸 언제 셋팅하고 왔던가요?  **  </typo>
<code c>
if (cpu_arch >= CPU_ARCH_ARMv7 && (cr & CR_TRE)) {
</code>
----
> 오랫만에 어셈 코드를 살펴봅시다.
>
> arch/arm/mm/proc-v7.S 파일을 보면 다음과 같은 code가 존재합니다.
> <code asm>
        adr     r5, v7_crval
        ldmia   r5, {r5, r6} 
#ifdef CONFIG_CPU_ENDIAN_BE8
        orr     r6, r6, #1 << 25                @ big-endian page tables
#endif
#ifdef CONFIG_SWP_EMULATE
        orr     r5, r5, #(1 << 10)              @ set SW bit in "clear"
        bic     r6, r6, #(1 << 10)              @ clear it in "mmuset"
#endif
        mrc     p15, 0, r0, c1, c0, 0           @ read control register
        bic     r0, r0, r5                      @ clear bits them
        orr     r0, r0, r6                      @ set them
 THUMB( orr     r0, r0, #1 << 30        )       @ Thumb exceptions
        mov     pc, lr                          @ return to head.S:__ret
</code>
>
> 여기서 v7_crval을 따라가 보면 cr값은 다음과 같이 정의되어 있습니다.
> <code asm>
        .align  2
        .type   v7_crval, #object
v7_crval:
        crval   clear=0x2120c302, mmuset=0x10c03c7d, ucset=0x00c01c7c
</code>
> 위의 v7_crval 설정은 위의 #ifdef CONFIG_SWP_EMULATE에 의해 일부 변경된다.
>> CONFIG_SWP_EMULATE는 SWP, SWPB Emulation 여부를 의미하며 CONFIG_SMP 설정시 자동으로 선택된다.
> 10번 bit를 clear는 set하고 mmuset는 clear하면 아래와 같다.
> <WRAP center round important 60%>
  * CR_clear=0x2120c702
  * CR_mmuset=0x10c0387d
</WRAP>
> 계산에 앞서 v7_crval에 의해 변경되기전 SCTLR 값을 살펴보자.
> Cortex A15 TRM에 따르면 SCTLR의 reserved 정보는 다음과 같다.
> <WRAP center round important 60%>
  * reserved_value: 0x00c50078
  * reserved_mask:  0x8de7c3f8
</WRAP>
> 또한 power on reset value와 주 target이 little endian 시스템임을 고려하여 다음 bit가 추가로 가정한다.
> <WRAP center round important 60%>
CR_config: 
           [30]=0 (thumb exception disabled),
           [25]=0 (exception endian=little endian),
           [20:19]=0(reset value), 
</WRAP>
> 따라서 value = 0x00c50078
> reserved value를 제외하고 나머지를 clear로 clear하고 mmuset으로 set하면 된다.
> 정리 결과는 cr_alignment = cr_no_alignment = 0x10c5387d이다.
> 자세한 수식은 아래 참고1을 보시라.
> 
> 이상하게 보인다. 왜 cr_alignment와 cr_no_alignment가 같을까? 서로의 CR_A가 달라야하지 않을까?
> 답은 다음 코드에서 찾을 수 있다.
> <code asm>
__enable_mmu:
#if defined(CONFIG_ALIGNMENT_TRAP) && __LINUX_ARM_ARCH__ < 6
  orr r0, r0, #CR_A
#else
  bic r0, r0, #CR_A
#endif
> </code>
> git blame을 통해 해당 코드를 추적하면 "git log 8428e84d"에서 답을 얻을 수 있다.
> 요지는 v6이상에서는 gcc가 unaligned access 되도록 코드를 생성한다.
> 따라서 aligment_init()이전에 불필요한 kernel trap을 막기 위해 CR_A clear해야 한다.
> exynos5420은 v7이므로 현재 시점에서 cr_alignment와 cr_no_alignment는 같은 것이 맞다.
>
> 참고 1
> <code c>
cr= (reserved_mask & reserved_value) |  (~reserved_mask & (value & ~CR_clear & CR_mmuset)
  = (reserved_mask & reserved_value) | ((~reserved_mask & value) & (~reserved_mask & ~CR_clear & CR_mmuset))
     using ((~reserved_mask & value) = 0) since value=reserved_value) 
  = (reserved_mask & reserved_value) | (~reserved_mask & ~CR_clear & CR_mmuset)
     위의 reserved_mask, reserved_value, clear, mmuset을 대입하면
  = (0x8de7c3f8 & 0x00c50078) | (~0x8de7c3f8 & (~0x2120c702 & 0x10c0387d))
-------------------------------------------------------
                 |       0x72183c07(=~0x8de7c3f8)
  0x8de7c3f8     |       0xdedf38fd(=~0x2120c702)
& 0x00c50078     |     & 0x10c0387d
------------     |     ------------
  0x00c50078     |       0x10003805
-------------------------------------------------------

  = (0x00c50078 | 0x10003805)
  = 0x10c5387d
</code>
</WRAP>
<WRAP center round box 95%>
<typo fs:16px;>
** 3) mem_type 구조체를 어떻게 다음과 같이 선언할 수 있을까요?  **  </typo>
<code c>
static struct mem_type mem_types[] = {
        [MT_DEVICE] = {           /* Strongly ordered / ARMv6 shared device */
                .prot_pte       = PROT_PTE_DEVICE | L_PTE_MT_DEV_SHARED |
                                  L_PTE_SHARED,
                .prot_l1        = PMD_TYPE_TABLE,
                .prot_sect      = PROT_SECT_DEVICE | PMD_SECT_S,
                .domain         = DOMAIN_IO,
        },   
        [MT_DEVICE_NONSHARED] = { /* ARMv6 non-shared device */
                .prot_pte       = PROT_PTE_DEVICE | L_PTE_MT_DEV_NONSHARED,
                .prot_l1        = PMD_TYPE_TABLE,
                .prot_sect      = PROT_SECT_DEVICE,
                .domain         = DOMAIN_IO,
        },   
        [MT_DEVICE_CACHED] = {    /* ioremap_cached */
                .prot_pte       = PROT_PTE_DEVICE | L_PTE_MT_DEV_CACHED,
                .prot_l1        = PMD_TYPE_TABLE,
                .prot_sect      = PROT_SECT_DEVICE | PMD_SECT_WB,
                .domain         = DOMAIN_IO,
        }, 
</code>
----
> [[http://iamroot.org/wiki/doku.php?id=%EC%8A%A4%ED%84%B0%EB%94%94:arm_kernel_%EC%8A%A4%ED%84%B0%EB%94%94_10%EC%B0%A8_full_%EB%B0%94%EB%A1%9C%EA%B0%80%EA%B8%B0#주차_20131019 | 26주차]] 3-8)에도 언급 하였던 내용입니다.
>
> C99에서 사용가능하고, 이렇게 사용하는 것의 장점이 차례대로 index가 0, 1, 2로 넘버링 되고, <wrap em>중간에 index를 건너 뛰어도 상관없다. </wrap>
>
> 참고로 문서는 원래 돈주고 구입해야 하지만, draft는 인터넷에 공개되어 있습니다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 4) s2가 무엇을 의미하는 것일까요?  **  </typo>
<code c>
s2_pgprot = cp->pte_s2;
</code>
<code c>
    .policy         = "uncached",
    .cr_mask        = CR_W|CR_C,
    .pmd            = PMD_SECT_UNCACHED,
    .pte            = L_PTE_MT_UNCACHED,
    .pte_s2         = s2_policy(L_PTE_S2_MT_UNCACHED),
}
</code>
<code c>        
#define s2_policy(policy)       0
</code>
----
> s2_policy()를 보니, LPAE를 pte가 2개 있다고 생각하는 것 같습니다. 여기서 우리는 0으로 설정 되어 있습니다.
> ARM은 기본적으로 2level address translation이고 LPAE(40b addressing)를 지원하는 경우 3level address translation이다.
> 2lvl translation의 경우 PGD PMD PTE중 PMD를 제외하고 PGD, PTE를 사용한다.
> 3lvl translation의 경우 나머지 PMD를 사용하지 않고 PTE_S2를 두어 PTE를 2중으로 사용한다. (이로써 linux kernel은 최대 4level address translation을 지원하는 것으로 판단된다.)
> 
> 라고 생각해도 좋으나 위의 말은 정확히 말하면 틀린 말이다.
>  
> linux kernel은 
> PGD를 section 2개 (2MB)에 대한 pointer로 사용하고 
> PMD는 각각 1MB section을 가리킨다. 
> 결국 PGD와 PMD 모두 L1 descriptor 관리에 사용된다.
> 이로 인해 L2 descriptor를 PTE를 사용하고 3 level descriptor에서는 PTE_S2를 두어 L3 descriptor를 사용한다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 5) APX가 무엇을 의미하는 것일까요?  **  </typo>
<code c>
        if (cpu_arch >= CPU_ARCH_ARMv6 && (cr & CR_XP)) {
#ifndef CONFIG_ARM_LPAE // CONFIG_ARM_LPAE=n
                /*
                 * Mark cache clean areas and XIP ROM read only
                 * from SVC mode and no access from userspace.
                 */

                mem_types[MT_ROM].prot_sect |= PMD_SECT_APX|PMD_SECT_AP_WRITE;
                mem_types[MT_MINICLEAN].prot_sect |= PMD_SECT_APX|PMD_SECT_AP_WRITE;
                mem_types[MT_CACHECLEAN].prot_sect |= PMD_SECT_APX|PMD_SECT_AP_WRITE;
#endif
</code>
----
> APX는 Access permission으로, AP[2] 비트를 통해 ROM에서 access가 가능하도록 하는 것입니다.
> {{ :스터디:apx.png?direct |}}
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 6) protection_map을 어떻게 해석해야 하나요?  **  </typo>
<code c>
/* description of effects of mapping type and prot in current implementation.
 * this is due to the limited x86 page protection hardware.  The expected
 * behavior is in parens:
 *                      
 * map_type     prot    
 *              PROT_NONE       PROT_READ       PROT_WRITE      PROT_EXEC
 * MAP_SHARED   r: (no) no      r: (yes) yes    r: (no) yes     r: (no) yes
 *              w: (no) no      w: (no) no      w: (yes) yes    w: (no) no
 *              x: (no) no      x: (no) yes     x: (no) yes     x: (yes) yes
 *              
 * MAP_PRIVATE  r: (no) no      r: (yes) yes    r: (no) yes     r: (no) yes
 *              w: (no) no      w: (no) no      w: (copy) copy  w: (no) no
 *              x: (no) no      x: (no) yes     x: (no) yes     x: (yes) yes
 *
 */
pgprot_t protection_map[16] = {
        __P000, __P001, __P010, __P011, __P100, __P101, __P110, __P111,
        __S000, __S001, __S010, __S011, __S100, __S101, __S110, __S111
};

</code>
----
> <nowiki>__P###, __S###에서 ###은 순서대로 xwr 권한이다.</nowiki>(chmod명령의 access permission과 같다.)
> 따라서 
> <WRAP center round important 60%>
  * PROT_NONE == 000      ---
  * PROT_READ == 001      --r
  * PROT_WRITE== 010      -w-
  * PROT_EXEC == 100      x--
</WRAP>
> 와 같이 mapping된다.
> 즉 PROT_READ | PROT_WRITE는 011이므로 <nowiki>__P011 또는 __S011</nowiki> 속성이다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 7) STRICT_MM_TYPECHECKS가 무엇일까요? define문을 어떻게 봐야 할까요? **  </typo>
<code c>
#undef STRICT_MM_TYPECHECKS

#ifdef STRICT_MM_TYPECHECKS
/*      
 * These are used to make use of C type-checking..
 */     
typedef struct { pteval_t pte; } pte_t;
typedef struct { pmdval_t pmd; } pmd_t;
typedef struct { pmdval_t pgd[2]; } pgd_t;
typedef struct { pteval_t pgprot; } pgprot_t;
        
#define pte_val(x)      ((x).pte)
#define pmd_val(x)      ((x).pmd)
#define pgd_val(x)      ((x).pgd[0])
#define pgprot_val(x)   ((x).pgprot)
        
#define __pte(x)        ((pte_t) { (x) } )
#define __pmd(x)        ((pmd_t) { (x) } )
#define __pgprot(x)     ((pgprot_t) { (x) } )

#else   
/*      
 * .. while these make it easier on the compiler
 */
typedef pteval_t pte_t;
typedef pmdval_t pmd_t;
typedef pmdval_t pgd_t[2];
typedef pteval_t pgprot_t;

#define pte_val(x)      (x)
#define pmd_val(x)      (x)
#define pgd_val(x)      ((x)[0])
#define pgprot_val(x)   (x)

#define __pte(x)        (x)
#define __pmd(x)        (x)
#define __pgprot(x)     (x)

#endif /* STRICT_MM_TYPECHECKS */
</code>
----
> #else 위쪽은 type을 체크하기 위함입니다. 어떻게 type을 체크 할까요? 
>
> 실제로 type-check를 위해 나중에 sparse등을 돌릴 때 undef를 무효화시키는지는 조사가 필요함. FIXME
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 8) cache와 memory type이 반복적으로 언급되는데, 다시한번 간단하게 언급하고 넘어가면 좋을것 같습니다. **  </typo>
<code c>
#define CPOLICY_UNCACHED        0
#define CPOLICY_BUFFERED        1
#define CPOLICY_WRITETHROUGH    2
#define CPOLICY_WRITEBACK       3
#define CPOLICY_WRITEALLOC      4
</code>
<code>
static struct mem_type mem_types[] = {
        [MT_DEVICE] = {           /* Strongly ordered / ARMv6 shared device */
                .prot_pte       = PROT_PTE_DEVICE | L_PTE_MT_DEV_SHARED |
                                  L_PTE_SHARED,
                .prot_l1        = PMD_TYPE_TABLE,
                .prot_sect      = PROT_SECT_DEVICE | PMD_SECT_S,
                .domain         = DOMAIN_IO,
        },
        [MT_DEVICE_NONSHARED] = { /* ARMv6 non-shared device */
                .prot_pte       = PROT_PTE_DEVICE | L_PTE_MT_DEV_NONSHARED,
                .prot_l1        = PMD_TYPE_TABLE,
                .prot_sect      = PROT_SECT_DEVICE,
                .domain         = DOMAIN_IO,
        },
        [MT_DEVICE_CACHED] = {    /* ioremap_cached */
                .prot_pte       = PROT_PTE_DEVICE | L_PTE_MT_DEV_CACHED,
                .prot_l1        = PMD_TYPE_TABLE,
                .prot_sect      = PROT_SECT_DEVICE | PMD_SECT_WB,
                .domain         = DOMAIN_IO,
        },
        [MT_DEVICE_WC] = {      /* ioremap_wc */
                .prot_pte       = PROT_PTE_DEVICE | L_PTE_MT_DEV_WC,
                .prot_l1        = PMD_TYPE_TABLE,
                .prot_sect      = PROT_SECT_DEVICE,
                .domain         = DOMAIN_IO,
        },
        [MT_UNCACHED] = {
                .prot_pte       = PROT_PTE_DEVICE,
                .prot_l1        = PMD_TYPE_TABLE,
                .prot_sect      = PMD_TYPE_SECT | PMD_SECT_XN,
                .domain         = DOMAIN_IO,
        },
</code>
----
> <wrap em> Cache policy</wrap>
>
> - UNCACHED: cache를 사용하지 않는다. 
> - BUFFERED: cache와 memory사이에 쓰기 버퍼를 사용한다.
> {{ :스터디:figures:10차_armc:27주차:bufferd.png?direct&400 |}}
> - WRITETHROUGH: cache에 쓰기가 발생할 때 memory와 memory 하위 계층에 바로 반영한다. USB와 같이 탈부착이 빈번한 저장 장치에 주로 사용한다.
> {{ :스터디:figures:10차_armc:27주차:WRITETHROUGH.jpg?direct&250 |}}
> - WRITEBACK: cache에 우선 적용하고, replacement 정책에 의해 데이터가 cache 영역에서 나가야 할 경우 memory에 반영한다.
> {{ :스터디:figures:10차_armc:27주차:WRITEBACK.jpg?direct&250 |}}
> - WRITEALLOC: cache miss가 발생하였을 때, cache 컨트롤러가 cache line을 할당하기 위한 방법으로 2가지가 있다.
>> 1) read-allocate: 데이터를 memory에서 읽었을때 miss가 발생하면 cache line 할당, write시에는 miss가 발생해도 아무런 현상 일어나지 않음
>> 2) write-allocate: read와 반대로 memory에 데이터를 쓸때 cache line 할당
>
>
> <wrap em> Memory Type </wrap>
> 
> - MT_DEVICE: ARMv6의 공유 디바이스
> - MT_DEVICE_NONSHARED: ARMv6의 비공유 디바이스
> - MT_DEVICE_CACHED: 쓰기 버퍼 및 cache 사용 디바이스
> - MT_DEVICE_WC: 쓰기 버퍼 및 cache 미사용 디바이스
> - MT_UNCACHED: cache 안되는 memory 영역
>
> (Ref.: 모기향책, p199~p200)
</WRAP>
</box>
\\
\\
\\
