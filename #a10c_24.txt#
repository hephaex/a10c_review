##### ARM10C 100 주차 2번째 진행
##### 일시 : 2015.05.09 (100 주차, 스터디 진행)
##### 모임명 : NAVER개발자커뮤니티지원_IAMROOT.ORG_10차ARM-C
##### 장소 : 토즈 타워점
##### 장소지원 : NAVER 개발자 커뮤니티 지원 프로그램
##### 참여인원 :  3명
============

==== 24주차(2013.10.05) ====
<box center round blue 95% | <typo fs:18px;> ** 1.  setup_arch()→setup_machine_fdt() ** </typo>>
\\
{{ :스터디:setup_machine_fdt3_f3.jpg?direct |}}
\\
<WRAP center round box 95%>
<code c>
static inline void *phys_to_virt(phys_addr_t x)
{
        return (void *)(__phys_to_virt((unsigned long)(x)));
}  
</code>
<code c>
static inline unsigned long __phys_to_virt(unsigned long x)
{
        unsigned long t;
        __pv_stub(x, t, "sub", __PV_BITS_31_24);
        return t;
}
</code>
<code asm>
#define __pv_stub(from,to,instr,type)                   \
        __asm__("@ __pv_stub\n"                         \
        "1:     " instr "       %0, %1, %2\n"           \
        "       .pushsection .pv_table,\"a\"\n"         \
        "       .long   1b\n"                           \
        "       .popsection\n"                          \
        : "=r" (to)                                     \
        : "r" (from), "I" (type))
</code>
<code c>
#define __PV_BITS_31_24 0x81000000
</code>
<typo fs:16px;>
** *phys_to_virt()함수의 전체적인 동작 이해가 필요합니다. 하나씩 짚고 넘어갑시다. \\
\\
1) pushsection에 대해서 먼저 정리 합시다.  ** 
</typo>
----
> 용어부터 정리하면 <fc #0000FF>pushsection</fc>이란, <fc #0000FF>기존의 section을 섹션 스택에 push</fc>하고 <fc #0000FF>인자로 사용된 이름의 section을 현재 section</fc>으로 지정합니다.
> <fc #008000>popsection</fc>을 만나면 <fc #008000>직전에 push했던 section을 현재 section으로 pop</fc> 합니다.
>
> 위의 code에서는 .pv_table section에 label 1의 주소값을 저장합니다. 
> 결과적으로, .pv_table에 ["instr "       %0, %1, %2\n" = (sub   t, x, 0x81000000)]의 <wrap em>주소값을 저장</wrap>합니다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 2) 그렇다면 .pv_table은 여기서만 사용된 건가요? **  </typo>
----
> .pv_table에 위와 같은 명령어에 대한 주소가 여러개 존재한다.어디에 존재할까?
> .pvtable은 <nowiki>__pv_stub macro에 의해 생성되며 __pv_stub는 __virt_to_phys(), __phys_to_virt()</nowiki>에 의해 호출된다.
> physical 주소나 virtual주소 변환이 필요한 경우에 <nowiki>__virt_to_phys(), __phys_to_virt()</nowiki>을 사용하는데
> 커널에서는 mm/mmu.c, mm/init.c등에서 사용되고 있다. 자세한 사용 위치는 커널 소스를 참조한다.

</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 3) 0x81000000의 의미는 무엇인가요? 왜 이렇게 고정을 했을까요?  **  </typo>
----
> 일단 이 숫자를 이용하는 이유는, 실제 주소를 알려고 하는 것입니다.
> 컴파일 타임에는 offset을 모르기 때문에, 런타임 시 0x81000000을 이용하여 계산하는 것이다.
>
> 0x81000000을 사용하는 이유는, 아래 그림의 Immediate에 양쪽 끝을 1로 맞추려는 의미입니다.
> 그리고 rotate에 12를 넣어 런타임 시 수정을 할 수 있습니다.
>
> {{ :스터디:immediate2.png?direct |}}
> 그리고 이걸 고치는 코드는 kernel/head.S의 다음 라인이 해당됩니다.
> <code asm>
        b       2f  
1:      ldr     ip, [r7, r3] 
        bic     ip, ip, #0x000000ff
        orr     ip, ip, r6      @ mask in offset bits 31-24
        str     ip, [r7, r3] 
2:      cmp     r4, r5
        ldrcc   r7, [r4], #4    @ use branch for delay slot
        bcc     1b  
        mov     pc, lr
</code>
> 다시 정리하자.
> <nowiki>__virt_to_phys(), __phys_to_virt()</nowiki>는 Physical Address(PA)<->Virtual Address(VA) 변환을 위한 함수이다.
> 이 함수는 PA = VA + DELTA, VA = PA - DELTA와 같은 수식으로 표현할 수 있다. (ADD/SUB t, x, #DELTA)
> 이때 0x8100_0000이 바로 DELTA에 해당하며 ARM instruction상에서 imm12에 해당하는 값이다.
>> PA, VA의 base는 16MB align되어 있어 PA-VA값인 delta는 0xXX00_0000과 같이 최상위 8bit만 있어 imm12로 표현이 가능하다.
> imm12는 rot4와 imm8로 구성되는데 delta가 0xXX00_0000형태이므로 rot4는 상수(=4)이다.
>> (rot4(=4)는 (필요한 right rotate 수/2)로 0xXX를 8b right rotate하면 0xXX00_0000이다.)
> <nowiki>__fixup_pv_table</nowiki> 함수에서 imm12를 모두 변경하도록 프로그램 할수도 있겠으나 불필요한 낭비이다.
> 따라서 애초에 rot4=4가 될 수 있도록 imm값을 설정해주면 rot4를 바꾸지 않고 imm8만 수정하면 delta값을 수정할 수 있다.
> 이렇게 하기 위해 (rot4=4가 되도록) 정한 초기값이 0x81000000이다. 
> 당연히 이값을 0xff000000으로 하여도 동작한다.
>> 요점은 bit31과 bit24를 set하면 중간의 bit[30:25]의 값과는 상관없이 rot4를 의도한 값으로 설정할 수 있다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 4) MMU가 ON되어 있는 상태인데 위의 code를 수행하는 이유와, 기존 code에 비해 performance가 향상되는 이유는 무엇일까요?  **  </typo>
----
> 해당 코드는 MMU_ON이 되었기 때문에 필요한 코드이다.
> 현재 _atags_pointer는 PA이다. 따라서 MMU가 켜진 상황에서는 VA를 얻기위해 해당변환이 필요하다.
>
> 성능 향상되는 이유에 앞서 #else에 해당하는 원래의 코드부터 보자.
<code c>
#define __virt_to_phys(x) ((x) - PAGE_OFFSET + PHYS_OFFSET)
#define __phys_to_virt(x) ((x) - PHYS_OFFSET + PAGE_OFFSET)
</code>
> 이때 두가지 경우가 있다.
>
> 1. PHYS_OFFSET과 PAGE_OFFSET이 constant인 경우
> 2. PHYS_OFFSET이 변수인 경우(IMAGE가 임의의 램영역에 위치)
>
> 1의 경우 위의 코드에서 (PAGE_OFFSET - PHYS_OFFSET)이 상수 이므로 1회의 add/sub수행문으로 변환된다.
> 2의 경우 PHYS_OFFSET이 변수인 경우 (PAGE_OFFSET - PHYS_OFFSET)는 상수가 아니므로 2회의 add/sub 연산이 
> 필요하고 추가로 PHYS_OFFSET의 값을 읽기 위한 load문도 필요하다.
> 당연히 2가 상대적으로 매우 느리다.(load연산시 cache hit 보장이 없음) 
>
> 이때 생각할 수 있는 것이 
>
>> A. PHYS_OFFSET은 초기에 결정된 후로는 계속 상수이다.
>> B. 초기화를 잘해서 2를 1처럼 동작시킬 수 있지 않을까?
>
> 바로 2인 경우에도 1처럼 상수로 만들어 놓고 초기화 과정에서 instruction내의 상수 부분을 수정하여주는 것이다.
> 다시말해, <nowiki>__virt_to_phys(), __phys_to_virt()</nowiki>의 위치마다 (PAGE_OFFSET - PHYS_OFFSET)값을 수정하여주는 것이다.(.text의 instruction중 imm12 field를 수정)
> 이를 위해 해당 instruction이 위치한 주소가 array형태로 기록한 것이 pv_table이고 
> .pv_table을 통해 해당 instruction을 수정한 것이 arch/arm/kernel/head.S의 _fixup_a_pv_table이다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 5) <nowiki> __force 지시어는 무엇을 뜻하는 건가요? </nowiki>  **  </typo>
<code c>
#define __be32_to_cpu(x) __swab32((__force __u32)(__be32)(x))
</code>
----
> <nowiki> __force </nowiki>는 <nowiki> __CHECKER__ </nowiki>가 정의되었을때 실행하는 것으로 보아 sparse와 관련된 속성일 것 같습니다.
> 이런것이 있다 알아두고 pass하면 될 것 같습니다.
> <code c>
#ifdef __CHECKER__
# define __user         __attribute__((noderef, address_space(1)))
# define __kernel       __attribute__((address_space(0)))
# define __safe         __attribute__((safe))
# define __force        __attribute__((force))
</code>
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 6) rev 명령은 어떤 의미인가요?  **  </typo>
<code c>
static inline __attribute_const__ __u32 __arch_swab32(__u32 x)
{ 
        __asm__ ("rev %0, %1" : "=r" (x) : "r" (x));
        return x;              
}
</code>
----
> rev 명령은 reverse의 의미로, byte order를 바꾸는 명령입니다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 7) Device Tree의 magic number가 0xd00dfeed로 저장되어 있는데, 왜 endian swap을 해야 하나요? **  </typo>
<code c>
if (be32_to_cpu(devtree->magic) != OF_DT_HEADER)
         return NULL;
</code>
----
> Device Tree는 기본적으로 Big Endian으로 되어 있기 때문에, Little endian을 사용하는 경우 수정해 줘야 합니다.
> 일단 Device Tree를 hex버전으로 열어 보겠습니다. (exynos 5250으로 열었습니다.)
>
> $ xxd arch/arm/boot/dts/exynos5250-smdk5250.dtb | more 
> <code>
0000000: d00d feed 0000 6501 0000 0038 0000 5fa4  ......e....8.._.
0000010: 0000 0028 0000 0011 0000 0010 0000 0000  ...(............
0000020: 0000 055d 0000 5f6c 0000 0000 0000 0000  ...].._l........
0000030: 0000 0000 0000 0000 0000 0001 0000 0000  ................
0000040: 0000 0003 0000 0004 0000 0000 0000 0001  ................
0000050: 0000 0003 0000 0004 0000 000f 0000 0001  ................
0000060: 0000 0003 0000 0024 0000 001b 7361 6d73  .......$....sams
0000070: 756e 672c 736d 646b 3532 3530 0073 616d  ung,smdk5250.sam
0000080: 7375 6e67 2c65 7879 6e6f 7335 3235 3000  sung,exynos5250.
</code>
> 위에 처음을 보면 0xd00dfeed의 순으로 표시되고 있으니, big endian으로 저장되어 있는 것을 확인할 수 있습니다.
</WRAP>

<WRAP center round box 95%>
<code c>
unsigned long __init of_get_flat_dt_root(void)
{
        unsigned long p = ((unsigned long)initial_boot_params) +
                be32_to_cpu(initial_boot_params->off_dt_struct);

        // OF_DT_NOP: 0x4
        while (be32_to_cpup((__be32 *)p) == OF_DT_NOP)
                p += 4;

        // OF_DT_BEGIN_NOD: 0x1
        BUG_ON(be32_to_cpup((__be32 *)p) != OF_DT_BEGIN_NODE);
        p += 4;
        return ALIGN(p + strlen((char *)p) + 1, 4); 
}
</code>
<typo fs:16px;>
** 8) of_get_flat_dt_root() 에서 NOP는 무엇인가요? asm의 NOP인가요? **  </typo>
----
> 해당 함수는 Device Tree의 root node를 찾는 역할을 하며, root node를 찾을 때까지, NOP는 skip (p+=4)합니다. 
> {{ :스터디:dt_root.png?direct |}}
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 9) BUG_ON()함수는 어떤 기능을 갖나요? 그리고 왜 다음 줄에서 +4를 하나요? **  </typo>
----
> 여기서 BUG_ON 함수는 device tree의 정상유무를 체크하고, 잘못되었을 경우 커널을 죽이는(?) 역할을 합니다.
> 그리고 +4는 위의 그림에서 root node는 bigin node 다음에 있기 때문에, p에 4를 더하는 연산을 합니다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 10) return시 +1, 4와 같은 숫자가 들어가는데, 왜 이런 연산을 할까요?  **  </typo>
<code c>
 p = ALIGN(p + strlen(pathp) + 1, 4);
</code>
----
> device tree의 조건중 다음 사항이 있다.
>   - device tree에서 root node는 node-name이나 unit-address를 갖지 않는다.
>   - BEGIN_NODE이후 나오는 node-name은 null-terminated string이다.
>
> 따라서 root-node의 경우 node-name은 null-string 또는 '/'로 반드시 4byte 이내이나
> 코드의 일관성 또는 잘못된 dtb에 대한 오류를 방지하기 위해 strlen으로 string의 끝을 찾은후 4B align한다. 
> 실제로는 최대 2B string(null 포함)이므로 P+=4와 같이 작성하여도 무방하다.
> +1은 string의 끝을 의미하는 null이 strlen()에 포함되지 않아 추가한 것이다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 11) for문을 바로 안쓰고, 아래와 같이 define문으로 정의하는 이유는 무엇 일까요?  **  </typo>
<code c>
for_each_machine_desc(mdesc)
</code>
<code c>
#define for_each_machine_desc(p)                        \
        for (p = __arch_info_begin; p < __arch_info_end; p++)
</code>
----
> for each는 심볼로 보기 편하게 사용 하는 것입니다.
> php에서는 for each 문법이 따로 존재하기도 합니다.
>
> 일반 for와 for each의 다른점은 
> for의 경우 index수정이 자유롭다. 예를 들어 for(i)문에서 조건에 따라 i의 step을 자유롭게 조정
> foreach의 경우 array형태로 된 구조체(예: list)에서 모든 원소에 대하여 동작하는 문으로 idx에 대한 수정이 불가하거나 어렵다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 12) Device Tree를 몰라서 그런지, of_fdt_is_compatible() 함수의 역할을 전혀 모르겠습니다.   **  </typo>
<code c>
int of_fdt_is_compatible(struct boot_param_header *blob,
                      unsigned long node, const char *compat)
{
        const char *cp;
        unsigned long cplen, l, score = 0;

        cp = of_fdt_get_property(blob, node, "compatible", &cplen);
        ...
</code>
----
> <code c>
of_fdt_get_property(blob, node, "compatible", &cplen);
</code>
> 위 함수의 의미는 device tree에서 "compatible" 항목을 찾는 것입니다.
> arch/arm/boot/dts/exynos5420.dts 파일을 열어보면 다음과 같이 보여집니다.
> <code>
/dts-v1/;
#include "exynos5420.dtsi"

/ {
        model = "Samsung SMDK5420 board based on EXYNOS5420";
        compatible = "samsung,smdk5420", "samsung,exynos5420";

        memory {
                reg = <0x20000000 0x80000000>;
        };  

        chosen {
                bootargs = "console=ttySAC2,115200 init=/linuxrc";
        };  
</code>
> 여기서 compatible은 "samsung,exynos5420"이고, kernel이 가지고 있는 정보와 맞는지 검사합니다.
> 마찬가지로, "compatible"대신 "model"이 들어가면 model항목을 찾습니다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 13) dtb, dtsi, dts의 차이점이 무엇인가요? 그리고 dtsi 문법은 어디서 확인할 수 있나요?  **  </typo>
----
> dtb는 Binary 파일을 나타내고, dts는 Source code, dtsi는 Include를 뜻합니다.
>
> dtsi 문법은 devicetree.org 에 가면 usage가 있는데, 그것을 보면 될 것 같습니다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 14) 그렇다면, for_each_machine_desc는 machine 수에 따라서 여러번 돌 수 있나요? **  </typo>
----
> 물론입니다. <wrap em>1)</wrap> 반복문을 수행하는 <nowiki> __arch_info_begin </nowiki>, <nowiki> __arch_info_end </nowiki>는 vmlinux.lds.S에 다음과 같이 명시되어 있습니다.
> <code asm>
.init.arch.info : {
       __arch_info_begin = .;          
       *(.arch.info.init)              
       __arch_info_end = .;            
}
</code>
> <wrap em>2)</wrap> 그리고 .arch.info.init은 MACHINE_START 정의문에서 이용됩니다.
> <code c>
#define MACHINE_START(_type,_name)                      \
static const struct machine_desc __mach_desc_##_type    \
 __used                                                 \
 __attribute__((__section__(".arch.info.init"))) = {    \
        .nr             = MACH_TYPE_##_type,            \
        .name           = _name,

#define MACHINE_END                             \
};
</code>
> <wrap em>3)</wrap> MACHINE_START의 예를들어 "mach-exynos5-dt.c" 파일을 열어보면, 다음과 같이 정의되어 있습니다.
> <code c>
DT_MACHINE_START(EXYNOS5_DT, "SAMSUNG EXYNOS5 (Flattened Device Tree)")
        /* Maintainer: Kukjin Kim <kgene.kim@samsung.com> */
        .init_irq       = exynos5_init_irq,
        .smp            = smp_ops(exynos_smp_ops),
        .map_io         = exynos5_dt_map_io,
        .init_machine   = exynos5_dt_machine_init,
        .init_late      = exynos_init_late,
        .init_time      = exynos_init_time,
        .dt_compat      = exynos5_dt_compat,
        .restart        = exynos5_restart,
        .reserve        = exynos5_reserve,
MACHINE_END
</code>
> 결국 여기에 있는 정보와 매칭하는 것이고, MACHINE_START가 여러개 있으면 당연히 여러개 돌 수 있습니다.
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 15) score의 의미는 무엇일까요? **  </typo>
----
> score의 변화되는 조건을 보면, 같을때 return을 합니다.
> 예를들어,kirkwood-cloudbox.dts파일을 보면 다음과 같이 compatible이 여러개 정의 되어 있습니다.
>
> 결국 device tree를 작성할 때 더 compatible할 수록 앞에 있게되니, 작을수록 좋게 됩니다.
> <code>
/include/ "kirkwood.dtsi"
/include/ "kirkwood-6281.dtsi"

/ {
        model = "LaCie CloudBox";
        compatible = "lacie,cloudbox", "marvell,kirkwood-88f6702", "marvell,kirkwood";

        memory {
                device_type = "memory";
                reg = <0x00000000 0x10000000>;
        };  
</code>
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 16) pathp가 의미하는 것이 무엇일까요? 그리고 '/'는 무엇일까요? **  </typo>
<code c>
const char *pathp;

p += 4;
if (tag == OF_DT_END_NODE) {
        depth--;
        continue;
}   
if (tag == OF_DT_NOP)
        continue;
if (tag == OF_DT_END)
        break;
if (tag == OF_DT_PROP) {
        u32 sz = be32_to_cpup((__be32 *)p);
        p += 8;
        if (be32_to_cpu(initial_boot_params->version) < 0x10)
                p = ALIGN(p, sz >= 8 ? 8 : 4); 
        p += sz; 
        p = ALIGN(p, 4); 
        continue;
}   
if (tag != OF_DT_BEGIN_NODE) {
        pr_err("Invalid tag %x in flat device tree!\n", tag);
        return -EINVAL;
}   
depth++;
pathp = (char *)p;
p = ALIGN(p + strlen(pathp) + 1, 4); 
</code>
----
> Device Tree라는 것은 말 그대로, Tree입니다. 여기서 depth는 tree의 depth를 나타냅니다.
> 
> 직접 파일과 비교를 해보겠습니다.
>
> <wrap em>1)</wrap> Device Tree의 구조를 다시 한번 떠 올려 보세요.
> {{ :스터디:dt_struct.png?direct |}}
> <wrap em>2)</wrap> 그리고 각 define문이 의미하는 숫자를 기억해 보세요.
> <code c>
/* Definitions used by the flattened device tree */
#define OF_DT_HEADER            0xd00dfeed      /* marker */
#define OF_DT_BEGIN_NODE        0x1             /* Start of node, full name */
#define OF_DT_END_NODE          0x2             /* End node */
#define OF_DT_PROP              0x3             /* Property: name off, size,
</code>
> 
> <wrap em>3)</wrap> dtb파일을 이전과 같이 hex편집기로 열어 보겠습니다.
> 그럼 아래 그림과 같이 나오는데, 여기서 0001은 start, 0003은 property, 0002는 end를 나타냅니다.
> {{ :스터디:exynos5250_dtb.png?direct |}}
> 결국 0001~0002까지를 하나의 블럭이라고 보시면 됩니다.
>
> 아래에서 aliases 또는 cpus와 같은 string이 path입니다.
> <code>
#include "exynos5.dtsi"
#include "exynos5250-pinctrl.dtsi"

#include <dt-bindings/clk/exynos-audss-clk.h>

/ {
        compatible = "samsung,exynos5250";

        aliases {
                spi0 = &spi_0;
                spi1 = &spi_1;
                spi2 = &spi_2;
                gsc0 = &gsc_0;
                gsc1 = &gsc_1;
                gsc2 = &gsc_2;
                gsc3 = &gsc_3;
                mshc0 = &dwmmc_0;
                mshc1 = &dwmmc_1;
                mshc2 = &dwmmc_2;
                mshc3 = &dwmmc_3;
                i2c0 = &i2c_0;
                i2c1 = &i2c_1;
                i2c2 = &i2c_2;
                i2c3 = &i2c_3;
                i2c4 = &i2c_4;
                i2c5 = &i2c_5;
                i2c6 = &i2c_6;
                i2c7 = &i2c_7;
                i2c8 = &i2c_8;
                pinctrl0 = &pinctrl_0;
                pinctrl1 = &pinctrl_1;
                pinctrl2 = &pinctrl_2;
                pinctrl3 = &pinctrl_3;
        };  

        cpus {
                #address-cells = <1>;
                #size-cells = <0>;


</code>
> node 구조체의 특성을 보면 single root node를 나타내는 것이 '/'로 보입니다. 
> 1. a single root node: "/"
> 2. a couple of child nodes: "node1" and "node2"
> 3. a couple of children for node1: "child-node1" and "child-node2"
> 4. a bunch of properties scattered through the tree.
> ref> [[http://devicetree.org/Device_Tree_Usage]]
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 17) chosen은 무엇을 의미하나요? **  </typo>
----
> device tree를 Linux 에서 사용하는 3가지 중요한 이유를 보면
> 1) platform 정의
> 2) runtime 설정
> 3) device population 
> 여기서 chosen의 실행시(runtime) 설정에 사용합니다. 
> exynos5420.dtsi를 직접 열어보면, 
> 밑에 보는바와 같이 실행시 디버거로 사용하는 시리얼(UART)을 설정하는데 사용합니다. 
> <code>
#include "exynos5420.dtsi"

/ {
        model = "Samsung SMDK5420 board based on EXYNOS5420";
        compatible = "samsung,smdk5420", "samsung,exynos5420";

        memory {
                reg = <0x20000000 0x80000000>;
        };  

        chosen {
                bootargs = "console=ttySAC2,115200 init=/linuxrc";
        };  
</code>
</WRAP>

<WRAP center round box 95%>
<typo fs:16px;>
** 18) "linux,initrd-start"가 검색이 안됩니다. 이 속성은 무엇인가요? **  </typo>
<code c>
void __init early_init_dt_check_for_initrd(unsigned long node)
{       
        unsigned long start, end, len;
        __be32 *prop;

        pr_debug("Looking for initrd properties... ");
            
        prop = of_get_flat_dt_prop(node, "linux,initrd-start", &len);
</code>
----
> 이 속성은 exynos에는 존재하지 않고, "kirkwood-iconnect.dts"에 존재합니다.
> <code>
/include/ "kirkwood.dtsi"
/include/ "kirkwood-6281.dtsi"

/ {
        model = "Iomega Iconnect";
        compatible = "iom,iconnect-1.1", "iom,iconnect", "marvell,kirkwood-88f6281", "marvell,kirkwood";

        memory {
                device_type = "memory";
                reg = <0x00000000 0x10000000>;
        };  

        chosen {
                bootargs = "console=ttyS0,115200n8 earlyprintk";
                linux,initrd-start = <0x4500040>;
                linux,initrd-end   = <0x4800000>;
        }; 
</code>
> 그래서 exynos에는 없는 속성인가 했지만, "arch/arm/boot/compressed/atags_to_fdt.c"에서 언급 되었습니다.
> 아마 여기서 셋팅하고 넘어온게 아닌가 싶지만, 저희가 당시에 안보고 넘어 왔네요.
> <code c>
else if (atag->hdr.tag == ATAG_INITRD2) {
      uint32_t initrd_start, initrd_size;
      initrd_start = atag->u.initrd.start;
      initrd_size = atag->u.initrd.size;
      setprop_cell(fdt, "/chosen", "linux,initrd-start",
                      initrd_start);
      setprop_cell(fdt, "/chosen", "linux,initrd-end",
                      initrd_start + initrd_size);
</code>
>
> initrd 란 부팅시 초기화에 필요한 루트 디스크의 이미지를 나타내는 것으로 
> 특히 SCSI 하드 디스크 같은 장치를 사용할 때 중요합니다. 
>
> 만약 SCSI 하드를 사용할 경우 SCSI 부분을 커널 옵션에서 모듈로 설정했다면, 
> 부팅시 램디스크 이미지를 생성하지 않았을 경우 SCSI 하드를 인식할 수 없게 되므로
> 결국은 부팅을 할 수가 없게 됩니다. 이러한 이유로 램디스크의 이미지를 만드는 것이지요. 
>
> 따라서 커널 컴파일시 모듈 선택으로 부팅이 안될수 있으므로 장치를 정적으로 포함하는 것이 좋습니다.  
> 참조 링크 : [[http://blog.naver.com/PostView.nhn?blogId=silentservic&logNo=130015642074]]
</WRAP>
</box>
\\
\\
\\
